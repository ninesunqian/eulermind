%{
%}

%class MindView
%package excitedmind
%fsmclass MindViewFSM
%import prefuse.visual.NodeItem

%start MindViewStateMap::Normal

%map MindViewStateMap
%%

Normal
Exit
    {
        stopCursorTimer();
    }
Entry
    {
        renderTree();
    }
{
    mouseInNode(nodeItem: NodeItem)
        nil
    {
        startCursorTimer(nodeItem);
    }

    mouseOutNode
        nil
    {
        stopCursorTimer();
    }

    cursorTimeout(nodeItem: NodeItem)
        Normal
    {
        m_mindTreeController.setCursorNode(ctxt.m_mindTreeController.toSource(nodeItem));
    }

    cursorLeft
        Normal
    {
        m_mindTreeController.moveCursorLeft();
    }

    cursorRight
        Normal
    {
        m_mindTreeController.moveCursorRight();
    }
    cursorUp
        Normal
    {
        m_mindTreeController.moveCursorUp();
    }
    cursorDown
        Normal
    {
        m_mindTreeController.moveCursorDown();
    }

    toggleFold
        Normal
        {
            m_undoManager.addEdit(ctxt.m_mindTreeController.toggleFoldCursorUndoable());
        }

    remove
        [ ctxt.canRemove() ]
        Normal
        {
            m_undoManager.addEdit(ctxt.m_mindTreeController.removeCursorUndoable());
        }


    undo
        [ ctxt.m_undoManager.canUndo() ]
        Normal
        {
            m_undoManager.undo();
        }

    redo
        [ ctxt.m_undoManager.canRedo()]
        Normal
        {
            m_undoManager.redo();
        }

    startEditing
        Editing
        {
            startEditing();
        }

    startInserting(asChild: boolean)
        [ ctxt.canStartInserting(asChild) ]
        Inserting
        {
            startInserting(asChild);
        }

    startMoving
        Moving
        {
        }

    startLinking
        Moving
        {
        }
}

Editing
{
    ok
        Normal
        {
            stopEditing(true);
        }
    cancel
        Normal
        {
            stopEditing(false);
        }
}

Inserting
{
    ok(fromPrompter: boolean)
        Normal
        {
            stopInserting(true, fromPrompter);
        }
    cancel
        Normal
        {
            stopInserting(false, false);
        }
}

Moving
{
    ok(nodeItem: NodeItem)
        Normal
        {
            m_undoManager.addEdit(ctxt.m_mindTreeController.resetParentUndoable(nodeItem));
        }
    cancel
        Normal
        {

        }
}

Linking
{
    ok(nodeItem: NodeItem)
        Normal
        {
            m_undoManager.addEdit(ctxt.m_mindTreeController.resetParentUndoable(nodeItem));
        }
    cancel
        Normal
        {

        }
}

%%
