%{
%}

%class MindView
%package excitedmind
%fsmclass MindViewFSM
%import prefuse.visual.NodeItem
%import java.awt.dnd.DragSource

%start MindViewStateMap::Normal

%map MindViewStateMap
%%

Normal
Exit
    {
        stopCursorTimer();
    }
Entry
    {
        setMouseControlEnabled(true);
        renderTree();
        setCursor(null);
    }
{
    itemEntered(nodeItem: NodeItem)
        nil
    {
        startCursorTimer(nodeItem);
    }

    itemExited(nodeItem: NodeItem)
        nil
    {
        stopCursorTimer();
    }

    cursorTimeout(nodeItem: NodeItem)
        Normal
    {
        m_cursor.setCursorNodeItem(nodeItem);
    }

    cursorLeft
        Normal
    {
        m_cursor.moveLeft();
    }

    cursorRight
        Normal
    {
        m_cursor.moveRight();
    }

    cursorUp
        Normal
    {
        m_cursor.moveUp();
    }
    cursorDown
        Normal
    {
        m_cursor.moveDown();
    }

    itemPressed(nodeItem: NodeItem)
        Normal
        {
            m_cursor.setCursorNodeItem(nodeItem);
        }

    itemClicked()
        Normal
        {
            toggleFoldNode(ctxt.getCursorSourceNode());
        }

    itemDragged(nodeItem: NodeItem)
        Dragging
        {
        }

    remove
        [ ctxt.canRemove() ]
        Normal
        {
            removeCursor();
        }

    setProperty(key: String, value: Object)
        Normal
        {
            setCursorPropertyImpl(key, value);
        }

    undo
        [ ctxt.m_mindController.canUndo() ]
        Normal
        {
            m_mindController.undo();
        }

    redo
        [ ctxt.m_mindController.canRedo()]
        Normal
        {
            m_mindController.redo();
        }

    startEditing
        Editing
        {
            startEditing();
        }

    startInserting(asChild: boolean)
        [ ctxt.canStartInserting(asChild) ]
        Inserting
        {
            startInserting(asChild);
        }

    Default
        nil
    {

    }
}

Editing
Entry
    {
        setMouseControlEnabled(false);
    }
{
    ok
        Normal
        {
            stopEditing(true);
        }
    cancel
        Normal
        {
            stopEditing(false);
        }
    Default
        nil
    {

    }
}

Inserting
Entry
    {
        setMouseControlEnabled(false);
    }
{
    ok(fromPrompter: boolean)
        Normal
        {
            stopInserting(true, fromPrompter);
        }
    cancel
        Normal
        {
            stopInserting(false, false);
        }
    Default
        nil
    {

    }
}

Dragging
{
    itemDropped(nodeItem: NodeItem, add_ctrl: boolean)
        [add_ctrl == true]
        Normal
        {
            dragCursorToReferrer(ctxt.toSource(nodeItem));
        }

    itemDropped(nodeItem: NodeItem, add_ctrl: boolean)
        [add_ctrl == false]
        Normal
        {
            dragCursorToNewParent(ctxt.toSource(nodeItem));
        }

    cancel
        Normal
        {

        }
    Default
        nil
    {

    }
}

%%
