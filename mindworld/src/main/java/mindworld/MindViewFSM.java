/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : MindViewFSM.sm
 */




package mindworld;

import prefuse.visual.NodeItem;

public class MindViewFSM
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public MindViewFSM(MindView owner)
    {
        this (owner, MindViewStateMap.Normal);
    }

    public MindViewFSM(MindView owner, MindViewState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void cancel()
    {
        _transition = "cancel";
        getState().cancel(this);
        _transition = "";
        return;
    }

    public void itemDragged(NodeItem nodeItem)
    {
        _transition = "itemDragged";
        getState().itemDragged(this, nodeItem);
        _transition = "";
        return;
    }

    public void itemDropped(NodeItem draggedNode, NodeItem droppedNode, NodeDndControl.HitPosition hitPosition, NodeDndControl.DragAction dragAction)
    {
        _transition = "itemDropped";
        getState().itemDropped(this, draggedNode, droppedNode, hitPosition, dragAction);
        _transition = "";
        return;
    }

    public void ok()
    {
        _transition = "ok";
        getState().ok(this);
        _transition = "";
        return;
    }

    public void ok(boolean fromPrompter)
    {
        _transition = "ok";
        getState().ok(this, fromPrompter);
        _transition = "";
        return;
    }

    public void startEditing()
    {
        _transition = "startEditing";
        getState().startEditing(this);
        _transition = "";
        return;
    }

    public void startInserting(boolean asChild)
    {
        _transition = "startInserting";
        getState().startInserting(this, asChild);
        _transition = "";
        return;
    }

    public MindViewState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((MindViewState) _state);
    }

    protected MindView getOwner()
    {
        return (_owner);
    }

    public void setOwner(MindView owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private MindView _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class MindViewState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MindViewState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(MindViewFSM context) {}
        protected void exit(MindViewFSM context) {}

        protected void cancel(MindViewFSM context)
        {
            Default(context);
        }

        protected void itemDragged(MindViewFSM context, NodeItem nodeItem)
        {
            Default(context);
        }

        protected void itemDropped(MindViewFSM context, NodeItem draggedNode, NodeItem droppedNode, NodeDndControl.HitPosition hitPosition, NodeDndControl.DragAction dragAction)
        {
            Default(context);
        }

        protected void ok(MindViewFSM context)
        {
            Default(context);
        }

        protected void ok(MindViewFSM context, boolean fromPrompter)
        {
            Default(context);
        }

        protected void startEditing(MindViewFSM context)
        {
            Default(context);
        }

        protected void startInserting(MindViewFSM context, boolean asChild)
        {
            Default(context);
        }

        protected void Default(MindViewFSM context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class MindViewStateMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final MindViewStateMap_Normal Normal =
            new MindViewStateMap_Normal("MindViewStateMap.Normal", 0);
        public static final MindViewStateMap_Editing Editing =
            new MindViewStateMap_Editing("MindViewStateMap.Editing", 1);
        public static final MindViewStateMap_Inserting Inserting =
            new MindViewStateMap_Inserting("MindViewStateMap.Inserting", 2);
        public static final MindViewStateMap_Dragging Dragging =
            new MindViewStateMap_Dragging("MindViewStateMap.Dragging", 3);
    }

    protected static class MindViewStateMap_Default
        extends MindViewState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MindViewStateMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MindViewStateMap_Normal
        extends MindViewStateMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MindViewStateMap_Normal(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MindViewFSM context)
            {
                MindView ctxt = context.getOwner();

            ctxt.setMouseControlEnabled(true);
            ctxt.renderTree();
            ctxt.setCursor(null);
            return;
        }

        @Override
        protected void exit(MindViewFSM context)
            {
            MindView ctxt = context.getOwner();

            ctxt.stopCursorTimer();
            return;
        }

        @Override
        protected void Default(MindViewFSM context)
        {

            return;
        }

        @Override
        protected void itemDragged(MindViewFSM context, NodeItem nodeItem)
        {

            (context.getState()).exit(context);
            context.setState(MindViewStateMap.Dragging);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void startEditing(MindViewFSM context)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.startEditing();
            }
            finally
            {
                context.setState(MindViewStateMap.Editing);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void startInserting(MindViewFSM context, boolean asChild)
        {
            MindView ctxt = context.getOwner();

            if ( ctxt.canStartInserting(asChild) )
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.startInserting(asChild);
                }
                finally
                {
                    context.setState(MindViewStateMap.Inserting);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.startInserting(context, asChild);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MindViewStateMap_Editing
        extends MindViewStateMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MindViewStateMap_Editing(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MindViewFSM context)
            {
                MindView ctxt = context.getOwner();

            ctxt.setMouseControlEnabled(false);
            return;
        }

        @Override
        protected void Default(MindViewFSM context)
        {

            return;
        }

        @Override
        protected void cancel(MindViewFSM context)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopEditing(false);
            }
            finally
            {
                context.setState(MindViewStateMap.Normal);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ok(MindViewFSM context)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopEditing(true);
            }
            finally
            {
                context.setState(MindViewStateMap.Normal);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MindViewStateMap_Inserting
        extends MindViewStateMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MindViewStateMap_Inserting(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MindViewFSM context)
            {
                MindView ctxt = context.getOwner();

            ctxt.setMouseControlEnabled(false);
            return;
        }

        @Override
        protected void Default(MindViewFSM context)
        {

            return;
        }

        @Override
        protected void cancel(MindViewFSM context)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopInserting(false, false);
            }
            finally
            {
                context.setState(MindViewStateMap.Normal);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ok(MindViewFSM context, boolean fromPrompter)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopInserting(true, fromPrompter);
            }
            finally
            {
                context.setState(MindViewStateMap.Normal);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MindViewStateMap_Dragging
        extends MindViewStateMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MindViewStateMap_Dragging(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(MindViewFSM context)
        {

            return;
        }

        @Override
        protected void cancel(MindViewFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MindViewStateMap.Normal);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void itemDropped(MindViewFSM context, NodeItem draggedNode, NodeItem droppedNode, NodeDndControl.HitPosition hitPosition, NodeDndControl.DragAction dragAction)
        {
            MindView ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.dragAndDropNode(draggedNode, droppedNode, hitPosition, dragAction);
            }
            finally
            {
                context.setState(MindViewStateMap.Normal);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
